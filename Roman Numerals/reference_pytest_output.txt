============================= test session starts =============================
platform win32 -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0
rootdir: C:\Users\vmascuser\Documents\decoding-llm-capabilities\Roman Numerals
collected 150 items

test_reference_tests.py .F..F.FF....F....FFF..............F............. [ 32%]
...F....FF..F...F...FF....F......F.FF.FFFF....F.FF.........F............ [ 80%]
.......F......F..F...F.....F..                                           [100%]

================================== FAILURES ===================================
_________________________ test_XVIII[roman_chat_gpt3] _________________________

module = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3E3E0>('XVIII')
E        +    where <function valid_numeral at 0x0000020EFAD3E3E0> = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>.valid_numeral

test_reference_tests.py:18: AssertionError
_______________________ test_XVIII[roman_claude3_haiku] _______________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F1A0>('XVIII')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:18: AssertionError
______________________ test_XVIII[roman_github_copilot] _______________________

module = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F420>('XVIII')
E        +    where <function valid_numeral at 0x0000020EFAD3F420> = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>.valid_numeral

test_reference_tests.py:18: AssertionError
__________________________ test_XVIII[roman_gemini] ___________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F9C0>('XVIII')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:18: AssertionError
_______________________ test_MCXIV[roman_claude3_opus] ________________________

module = <module 'roman_claude3_opus' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_opus.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3E7A0>('MCXIV')
E        +    where <function valid_numeral at 0x0000020EFAD3E7A0> = <module 'roman_claude3_opus' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_opus.py'>.valid_numeral

test_reference_tests.py:22: AssertionError
__________________________ test_MCXIV[roman_gemini] ___________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F9C0>('MCXIV')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:22: AssertionError
________________________ test_MCXIV[roman_chat_gpt4o] _________________________

module = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3FE20>('MCXIV')
E        +    where <function valid_numeral at 0x0000020EFAD3FE20> = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>.valid_numeral

test_reference_tests.py:22: AssertionError
______________________ test_MCXIV[roman_chat_gpt4o_new] _______________________

module = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFC5CC5E0>('MCXIV')
E        +    where <function valid_numeral at 0x0000020EFC5CC5E0> = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>.valid_numeral

test_reference_tests.py:22: AssertionError
________________________ test_CIL[roman_claude3_haiku] ________________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_CIL(module):
>       assert module.valid_numeral("CIL") == False, "CIL should be False (I can't precede L)"
E       AssertionError: CIL should be False (I can't precede L)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F1A0>('CIL')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:30: AssertionError
__________________________ test_III[roman_chat_gpt3] __________________________

module = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_III(module):
>       assert module.valid_numeral("III") == True, "III should be True"
E       AssertionError: III should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3E3E0>('III')
E        +    where <function valid_numeral at 0x0000020EFAD3E3E0> = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>.valid_numeral

test_reference_tests.py:38: AssertionError
_______________________ test_III[roman_github_copilot] ________________________

module = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_III(module):
>       assert module.valid_numeral("III") == True, "III should be True"
E       AssertionError: III should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F420>('III')
E        +    where <function valid_numeral at 0x0000020EFAD3F420> = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>.valid_numeral

test_reference_tests.py:38: AssertionError
___________________________ test_III[roman_gemini] ____________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_III(module):
>       assert module.valid_numeral("III") == True, "III should be True"
E       AssertionError: III should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F9C0>('III')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:38: AssertionError
__________________________ test_LLL[roman_chat_gpt4] __________________________

module = <module 'roman_chat_gpt4' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3E480>('LLL')
E        +    where <function valid_numeral at 0x0000020EFAD3E480> = <module 'roman_chat_gpt4' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4.py'>.valid_numeral

test_reference_tests.py:42: AssertionError
________________________ test_LLL[roman_claude3_haiku] ________________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F1A0>('LLL')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:42: AssertionError
_________________________ test_LLL[roman_chat_gpt4o] __________________________

module = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3FE20>('LLL')
E        +    where <function valid_numeral at 0x0000020EFAD3FE20> = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>.valid_numeral

test_reference_tests.py:42: AssertionError
_______________________ test_LLL[roman_chat_gpt4o_new] ________________________

module = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFC5CC5E0>('LLL')
E        +    where <function valid_numeral at 0x0000020EFC5CC5E0> = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>.valid_numeral

test_reference_tests.py:42: AssertionError
_______________________ test_empty[roman_claude3_haiku] _______________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_empty(module):
>       assert module.valid_numeral("") == False, "Empty string should be False (no empty string permitted)"
E       AssertionError: Empty string should be False (no empty string permitted)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F1A0>('')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:46: AssertionError
_________________________ test_3999[roman_chat_gpt3] __________________________

module = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3E3E0>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3E3E0> = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
_______________________ test_3999[roman_claude3_sonnet] _______________________

module = <module 'roman_claude3_sonnet' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_sonnet.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F060>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3F060> = <module 'roman_claude3_sonnet' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_sonnet.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
_______________________ test_3999[roman_claude3_haiku] ________________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F1A0>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
_______________________ test_3999[roman_github_copilot] _______________________

module = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F420>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3F420> = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
___________________________ test_3999[roman_gemini] ___________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F9C0>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
_________________________ test_3999[roman_chat_gpt4o] _________________________

module = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3FE20>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFAD3FE20> = <module 'roman_chat_gpt4o' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
_______________________ test_3999[roman_chat_gpt4o_new] _______________________

module = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFC5CC5E0>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x0000020EFC5CC5E0> = <module 'roman_chat_gpt4o_new' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt4o_new.py'>.valid_numeral

test_reference_tests.py:50: AssertionError
______________________ test_MDCLXVI[roman_claude3_haiku] ______________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MDCLXVI(module):
>       assert module.valid_numeral("MDCLXVI") == True, "MDCLXVI should be True"
E       AssertionError: MDCLXVI should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F1A0>('MDCLXVI')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:54: AssertionError
_____________________ test_MDCLXVI[roman_github_copilot] ______________________

module = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MDCLXVI(module):
>       assert module.valid_numeral("MDCLXVI") == True, "MDCLXVI should be True"
E       AssertionError: MDCLXVI should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F420>('MDCLXVI')
E        +    where <function valid_numeral at 0x0000020EFAD3F420> = <module 'roman_github_copilot' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_github_copilot.py'>.valid_numeral

test_reference_tests.py:54: AssertionError
_________________________ test_MDCLXVI[roman_gemini] __________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MDCLXVI(module):
>       assert module.valid_numeral("MDCLXVI") == True, "MDCLXVI should be True"
E       AssertionError: MDCLXVI should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x0000020EFAD3F9C0>('MDCLXVI')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:54: AssertionError
_________________________ test_mdclxvi[roman_gemini] __________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_mdclxvi(module):
>       assert module.valid_numeral("mdclxvi") == False, "mdclxvi should be False (capital letters needed)"

test_reference_tests.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

numeral = 'mdclxvi'

    def valid_numeral(numeral):
        """
        Checks if the given string is a valid Roman numeral.
    
        This function implements various rules to determine the validity of the numeral.
        """
    
        # Check if empty or contains non-alphabetic characters (Rule 1)
        if not numeral.isalpha() or not numeral:
            return False
    
        # Check if contains only valid characters (Rule 2)
        valid_chars = {"I", "V", "X", "L", "C", "D", "M"}
        if set(numeral) > valid_chars:
            return False
    
        # Check for no more than three consecutive repeats (Rule 3)
        for i in range(len(numeral) - 3):
            if numeral[i] == numeral[i + 1] == numeral[i + 2] == numeral[i + 3]:
                return False
    
        # Check for correct order except for valid subtractions (Rule 4)
        previous_value = 0
        for char in numeral:
>           current_value = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}[
                char
            ]
E           KeyError: 'm'

roman_gemini.py:31: KeyError
___________________________ test_XiV[roman_gemini] ____________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XiV(module):
>       assert module.valid_numeral("XiV") == False, "XiV should be False (all caps needed)"

test_reference_tests.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

numeral = 'XiV'

    def valid_numeral(numeral):
        """
        Checks if the given string is a valid Roman numeral.
    
        This function implements various rules to determine the validity of the numeral.
        """
    
        # Check if empty or contains non-alphabetic characters (Rule 1)
        if not numeral.isalpha() or not numeral:
            return False
    
        # Check if contains only valid characters (Rule 2)
        valid_chars = {"I", "V", "X", "L", "C", "D", "M"}
        if set(numeral) > valid_chars:
            return False
    
        # Check for no more than three consecutive repeats (Rule 3)
        for i in range(len(numeral) - 3):
            if numeral[i] == numeral[i + 1] == numeral[i + 2] == numeral[i + 3]:
                return False
    
        # Check for correct order except for valid subtractions (Rule 4)
        previous_value = 0
        for char in numeral:
>           current_value = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}[
                char
            ]
E           KeyError: 'i'

roman_gemini.py:31: KeyError
________________________ test_XD[roman_claude3_haiku] _________________________

module = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XD(module):
>       assert module.valid_numeral("XD") == False, "XD should be False (X can't precede D)"
E       AssertionError: XD should be False (X can't precede D)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F1A0>('XD')
E        +    where <function valid_numeral at 0x0000020EFAD3F1A0> = <module 'roman_claude3_haiku' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_claude3_haiku.py'>.valid_numeral

test_reference_tests.py:70: AssertionError
____________________________ test_XD[roman_gemini] ____________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XD(module):
>       assert module.valid_numeral("XD") == False, "XD should be False (X can't precede D)"
E       AssertionError: XD should be False (X can't precede D)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F9C0>('XD')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:70: AssertionError
__________________________ test_VX[roman_chat_gpt3] ___________________________

module = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_VX(module):
>       assert module.valid_numeral("VX") == False, "VX should be False (V can't precede X)"
E       AssertionError: VX should be False (V can't precede X)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3E3E0>('VX')
E        +    where <function valid_numeral at 0x0000020EFAD3E3E0> = <module 'roman_chat_gpt3' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_chat_gpt3.py'>.valid_numeral

test_reference_tests.py:74: AssertionError
____________________________ test_VX[roman_gemini] ____________________________

module = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_VX(module):
>       assert module.valid_numeral("VX") == False, "VX should be False (V can't precede X)"
E       AssertionError: VX should be False (V can't precede X)
E       assert True == False
E        +  where True = <function valid_numeral at 0x0000020EFAD3F9C0>('VX')
E        +    where <function valid_numeral at 0x0000020EFAD3F9C0> = <module 'roman_gemini' from 'C:\\Users\\vmascuser\\Documents\\decoding-llm-capabilities\\Roman Numerals\\roman_gemini.py'>.valid_numeral

test_reference_tests.py:74: AssertionError
=========================== short test summary info ===========================
FAILED test_reference_tests.py::test_XVIII[roman_chat_gpt3] - AssertionError:...
FAILED test_reference_tests.py::test_XVIII[roman_claude3_haiku] - AssertionEr...
FAILED test_reference_tests.py::test_XVIII[roman_github_copilot] - AssertionE...
FAILED test_reference_tests.py::test_XVIII[roman_gemini] - AssertionError: XV...
FAILED test_reference_tests.py::test_MCXIV[roman_claude3_opus] - AssertionErr...
FAILED test_reference_tests.py::test_MCXIV[roman_gemini] - AssertionError: MC...
FAILED test_reference_tests.py::test_MCXIV[roman_chat_gpt4o] - AssertionError...
FAILED test_reference_tests.py::test_MCXIV[roman_chat_gpt4o_new] - AssertionE...
FAILED test_reference_tests.py::test_CIL[roman_claude3_haiku] - AssertionErro...
FAILED test_reference_tests.py::test_III[roman_chat_gpt3] - AssertionError: I...
FAILED test_reference_tests.py::test_III[roman_github_copilot] - AssertionErr...
FAILED test_reference_tests.py::test_III[roman_gemini] - AssertionError: III ...
FAILED test_reference_tests.py::test_LLL[roman_chat_gpt4] - AssertionError: L...
FAILED test_reference_tests.py::test_LLL[roman_claude3_haiku] - AssertionErro...
FAILED test_reference_tests.py::test_LLL[roman_chat_gpt4o] - AssertionError: ...
FAILED test_reference_tests.py::test_LLL[roman_chat_gpt4o_new] - AssertionErr...
FAILED test_reference_tests.py::test_empty[roman_claude3_haiku] - AssertionEr...
FAILED test_reference_tests.py::test_3999[roman_chat_gpt3] - AssertionError: ...
FAILED test_reference_tests.py::test_3999[roman_claude3_sonnet] - AssertionEr...
FAILED test_reference_tests.py::test_3999[roman_claude3_haiku] - AssertionErr...
FAILED test_reference_tests.py::test_3999[roman_github_copilot] - AssertionEr...
FAILED test_reference_tests.py::test_3999[roman_gemini] - AssertionError: MMM...
FAILED test_reference_tests.py::test_3999[roman_chat_gpt4o] - AssertionError:...
FAILED test_reference_tests.py::test_3999[roman_chat_gpt4o_new] - AssertionEr...
FAILED test_reference_tests.py::test_MDCLXVI[roman_claude3_haiku] - Assertion...
FAILED test_reference_tests.py::test_MDCLXVI[roman_github_copilot] - Assertio...
FAILED test_reference_tests.py::test_MDCLXVI[roman_gemini] - AssertionError: ...
FAILED test_reference_tests.py::test_mdclxvi[roman_gemini] - KeyError: 'm'
FAILED test_reference_tests.py::test_XiV[roman_gemini] - KeyError: 'i'
FAILED test_reference_tests.py::test_XD[roman_claude3_haiku] - AssertionError...
FAILED test_reference_tests.py::test_XD[roman_gemini] - AssertionError: XD sh...
FAILED test_reference_tests.py::test_VX[roman_chat_gpt3] - AssertionError: VX...
FAILED test_reference_tests.py::test_VX[roman_gemini] - AssertionError: VX sh...
======================= 33 failed, 117 passed in 0.13s ========================
