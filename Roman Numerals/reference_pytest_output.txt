============================= test session starts ==============================
platform darwin -- Python 3.11.5, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/ibrahimkhalilov/Documents/decoding-llm-capabilities
configfile: pyproject.toml
collected 45 items

Roman Numerals/test_reference_tests.py ...F..............FFF...F........ [ 73%]
...........F                                                             [100%]

=================================== FAILURES ===================================
_________________________ test_MCXIV[roman_chat_gpt4o] _________________________

module = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1103216c0>('MCXIV')
E        +    where <function valid_numeral at 0x1103216c0> = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:19: AssertionError
__________________________ test_LLL[roman_chat_gpt4o] __________________________

module = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1103216c0>('LLL')
E        +    where <function valid_numeral at 0x1103216c0> = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:39: AssertionError
__________________________ test_LLL[roman_chat_gpt4] ___________________________

module = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x110444040>('LLL')
E        +    where <function valid_numeral at 0x110444040> = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:39: AssertionError
________________________ test_LLL[roman_chat_gpt4omini] ________________________

module = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1104440e0>('LLL')
E        +    where <function valid_numeral at 0x1104440e0> = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:39: AssertionError
_________________________ test_3999[roman_chat_gpt4o] __________________________

module = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1103216c0>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x1103216c0> = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:47: AssertionError
________________________ test_VX[roman_chat_gpt4omini] _________________________

module = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_VX(module):
>       assert module.valid_numeral("VX") == False, "VX should be False (V can't precede X)"
E       AssertionError: VX should be False (V can't precede X)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1104440e0>('VX')
E        +    where <function valid_numeral at 0x1104440e0> = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>.valid_numeral

Roman Numerals/test_reference_tests.py:71: AssertionError
=========================== short test summary info ============================
FAILED Roman Numerals/test_reference_tests.py::test_MCXIV[roman_chat_gpt4o]
FAILED Roman Numerals/test_reference_tests.py::test_LLL[roman_chat_gpt4o] - A...
FAILED Roman Numerals/test_reference_tests.py::test_LLL[roman_chat_gpt4] - As...
FAILED Roman Numerals/test_reference_tests.py::test_LLL[roman_chat_gpt4omini]
FAILED Roman Numerals/test_reference_tests.py::test_3999[roman_chat_gpt4o] - ...
FAILED Roman Numerals/test_reference_tests.py::test_VX[roman_chat_gpt4omini]
========================= 6 failed, 39 passed in 0.10s =========================
