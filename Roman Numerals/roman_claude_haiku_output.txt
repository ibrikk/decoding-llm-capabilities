============================= test session starts ==============================
platform darwin -- Python 3.11.5, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals
collected 8 items

roman_claude_haiku.py ...FFFF.                                           [100%]

=================================== FAILURES ===================================
____________________________________ test4 _____________________________________

    def test4():
        """
        Test that the function accepts valid Roman numerals in ascending order.
        """
        assert valid_numeral('I')
        assert valid_numeral('II')
        assert valid_numeral('III')
>       assert valid_numeral('IV')
E       AssertionError: assert False
E        +  where False = valid_numeral('IV')

roman_claude_haiku.py:99: AssertionError
____________________________________ test5 _____________________________________

    def test5():
        """
        Test that the function accepts valid Roman numerals with a smaller-valued symbol preceding a larger-valued symbol.
        """
>       assert valid_numeral('IV')
E       AssertionError: assert False
E        +  where False = valid_numeral('IV')

roman_claude_haiku.py:116: AssertionError
____________________________________ test6 _____________________________________

    def test6():
        """
        Test that the function rejects invalid Roman numerals with a smaller-valued symbol preceding a larger-valued symbol.
        """
        assert not valid_numeral('IL')
        assert not valid_numeral('IC')
        assert not valid_numeral('VX')
>       assert not valid_numeral('IIX')
E       AssertionError: assert not True
E        +  where True = valid_numeral('IIX')

roman_claude_haiku.py:130: AssertionError
____________________________________ test7 _____________________________________

    def test7():
        """
        Test that the function accepts valid sequences of 2 or 3 symbols that are integer powers of 10.
        """
        assert valid_numeral('II')
        assert valid_numeral('III')
        assert valid_numeral('XX')
        assert valid_numeral('XXX')
        assert valid_numeral('CC')
        assert valid_numeral('CCC')
>       assert valid_numeral('MM')
E       AssertionError: assert False
E        +  where False = valid_numeral('MM')

roman_claude_haiku.py:142: AssertionError
=========================== short test summary info ============================
FAILED roman_claude_haiku.py::test4 - AssertionError: assert False
FAILED roman_claude_haiku.py::test5 - AssertionError: assert False
FAILED roman_claude_haiku.py::test6 - AssertionError: assert not True
FAILED roman_claude_haiku.py::test7 - AssertionError: assert False
========================= 4 failed, 4 passed in 0.09s ==========================
