============================= test session starts ==============================
platform darwin -- Python 3.11.5, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals
collected 120 items

test_my_solution.py ...F.F.....F.F..................................F... [ 43%]
.FFFF..........F.F.....F.F...............................F.......F.F     [100%]

=================================== FAILURES ===================================
________________________ test_XVIII[roman_claude_haiku] ________________________

module = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b2980>('XVIII')
E        +    where <function valid_numeral at 0x1115b2980> = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>.valid_numeral

test_my_solution.py:15: AssertionError
___________________________ test_XVIII[roman_gemini] ___________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XVIII(module):
>       assert module.valid_numeral("XVIII") == True, "XVIII should be True"
E       AssertionError: XVIII should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b3600>('XVIII')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:15: AssertionError
________________________ test_MCXIV[roman_claude_haiku] ________________________

module = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b2980>('MCXIV')
E        +    where <function valid_numeral at 0x1115b2980> = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>.valid_numeral

test_my_solution.py:19: AssertionError
___________________________ test_MCXIV[roman_gemini] ___________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MCXIV(module):
>       assert module.valid_numeral("MCXIV") == True, "MCXIV should be True"
E       AssertionError: MCXIV should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b3600>('MCXIV')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:19: AssertionError
__________________________ test_LLL[roman_chat_gpt4] ___________________________

module = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b1440>('LLL')
E        +    where <function valid_numeral at 0x1115b1440> = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>.valid_numeral

test_my_solution.py:39: AssertionError
____________________________ test_LLL[roman_gemini] ____________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b3600>('LLL')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:39: AssertionError
__________________________ test_LLL[roman_chat_gpt4o] __________________________

module = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b3e20>('LLL')
E        +    where <function valid_numeral at 0x1115b3e20> = <module 'roman_chat_gpt4o' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4o.py'>.valid_numeral

test_my_solution.py:39: AssertionError
________________________ test_LLL[roman_chat_gpt4omini] ________________________

module = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_LLL(module):
>       assert module.valid_numeral("LLL") == False, "LLL should be False (three straight 5*10^n symbols)"
E       AssertionError: LLL should be False (three straight 5*10^n symbols)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115d47c0>('LLL')
E        +    where <function valid_numeral at 0x1115d47c0> = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>.valid_numeral

test_my_solution.py:39: AssertionError
_________________________ test_empty[roman_chat_gpt4] __________________________

module = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_empty(module):
>       assert module.valid_numeral("") == False, "Empty string should be False (no empty string permitted)"
E       AssertionError: Empty string should be False (no empty string permitted)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b1440>('')
E        +    where <function valid_numeral at 0x1115b1440> = <module 'roman_chat_gpt4' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4.py'>.valid_numeral

test_my_solution.py:43: AssertionError
________________________ test_3999[roman_claude_haiku] _________________________

module = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b2980>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x1115b2980> = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>.valid_numeral

test_my_solution.py:47: AssertionError
___________________________ test_3999[roman_gemini] ____________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_3999(module):
>       assert module.valid_numeral("MMMCMXCIX") == True, "MMMCMXCIX should be True"
E       AssertionError: MMMCMXCIX should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b3600>('MMMCMXCIX')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:47: AssertionError
_______________________ test_MDCLXVI[roman_claude_haiku] _______________________

module = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MDCLXVI(module):
>       assert module.valid_numeral("MDCLXVI") == True, "MDCLXVI should be True"
E       AssertionError: MDCLXVI should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b2980>('MDCLXVI')
E        +    where <function valid_numeral at 0x1115b2980> = <module 'roman_claude_haiku' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_claude_haiku.py'>.valid_numeral

test_my_solution.py:51: AssertionError
__________________________ test_MDCLXVI[roman_gemini] __________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_MDCLXVI(module):
>       assert module.valid_numeral("MDCLXVI") == True, "MDCLXVI should be True"
E       AssertionError: MDCLXVI should be True
E       assert False == True
E        +  where False = <function valid_numeral at 0x1115b3600>('MDCLXVI')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:51: AssertionError
____________________________ test_XD[roman_gemini] _____________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_XD(module):
>       assert module.valid_numeral("XD") == False, "XD should be False (X can't precede D)"
E       AssertionError: XD should be False (X can't precede D)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b3600>('XD')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:67: AssertionError
____________________________ test_VX[roman_gemini] _____________________________

module = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_VX(module):
>       assert module.valid_numeral("VX") == False, "VX should be False (V can't precede X)"
E       AssertionError: VX should be False (V can't precede X)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115b3600>('VX')
E        +    where <function valid_numeral at 0x1115b3600> = <module 'roman_gemini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_gemini.py'>.valid_numeral

test_my_solution.py:71: AssertionError
________________________ test_VX[roman_chat_gpt4omini] _________________________

module = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>

    @pytest.mark.parametrize("module", modules_to_test)
    def test_VX(module):
>       assert module.valid_numeral("VX") == False, "VX should be False (V can't precede X)"
E       AssertionError: VX should be False (V can't precede X)
E       assert True == False
E        +  where True = <function valid_numeral at 0x1115d47c0>('VX')
E        +    where <function valid_numeral at 0x1115d47c0> = <module 'roman_chat_gpt4omini' from '/Users/ibrahimkhalilov/Documents/decoding-llm-capabilities/Roman Numerals/roman_chat_gpt4omini.py'>.valid_numeral

test_my_solution.py:71: AssertionError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED test_my_solution.py::test_XVIII[roman_chat_gpt4]
PASSED test_my_solution.py::test_XVIII[roman_claude_opus]
PASSED test_my_solution.py::test_XVIII[roman_claude_sonnet]
PASSED test_my_solution.py::test_XVIII[roman_github_copilot]
PASSED test_my_solution.py::test_XVIII[roman_chat_gpt4o]
PASSED test_my_solution.py::test_XVIII[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_MCXIV[roman_chat_gpt4]
PASSED test_my_solution.py::test_MCXIV[roman_claude_opus]
PASSED test_my_solution.py::test_MCXIV[roman_claude_sonnet]
PASSED test_my_solution.py::test_MCXIV[roman_github_copilot]
PASSED test_my_solution.py::test_MCXIV[roman_chat_gpt4o]
PASSED test_my_solution.py::test_MCXIV[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_CCCC[roman_chat_gpt4]
PASSED test_my_solution.py::test_CCCC[roman_claude_opus]
PASSED test_my_solution.py::test_CCCC[roman_claude_sonnet]
PASSED test_my_solution.py::test_CCCC[roman_claude_haiku]
PASSED test_my_solution.py::test_CCCC[roman_github_copilot]
PASSED test_my_solution.py::test_CCCC[roman_gemini]
PASSED test_my_solution.py::test_CCCC[roman_chat_gpt4o]
PASSED test_my_solution.py::test_CCCC[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_CIL[roman_chat_gpt4]
PASSED test_my_solution.py::test_CIL[roman_claude_opus]
PASSED test_my_solution.py::test_CIL[roman_claude_sonnet]
PASSED test_my_solution.py::test_CIL[roman_claude_haiku]
PASSED test_my_solution.py::test_CIL[roman_github_copilot]
PASSED test_my_solution.py::test_CIL[roman_gemini]
PASSED test_my_solution.py::test_CIL[roman_chat_gpt4o]
PASSED test_my_solution.py::test_CIL[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_I[roman_chat_gpt4]
PASSED test_my_solution.py::test_I[roman_claude_opus]
PASSED test_my_solution.py::test_I[roman_claude_sonnet]
PASSED test_my_solution.py::test_I[roman_claude_haiku]
PASSED test_my_solution.py::test_I[roman_github_copilot]
PASSED test_my_solution.py::test_I[roman_gemini]
PASSED test_my_solution.py::test_I[roman_chat_gpt4o]
PASSED test_my_solution.py::test_I[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_III[roman_chat_gpt4]
PASSED test_my_solution.py::test_III[roman_claude_opus]
PASSED test_my_solution.py::test_III[roman_claude_sonnet]
PASSED test_my_solution.py::test_III[roman_claude_haiku]
PASSED test_my_solution.py::test_III[roman_github_copilot]
PASSED test_my_solution.py::test_III[roman_gemini]
PASSED test_my_solution.py::test_III[roman_chat_gpt4o]
PASSED test_my_solution.py::test_III[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_LLL[roman_claude_opus]
PASSED test_my_solution.py::test_LLL[roman_claude_sonnet]
PASSED test_my_solution.py::test_LLL[roman_claude_haiku]
PASSED test_my_solution.py::test_LLL[roman_github_copilot]
PASSED test_my_solution.py::test_empty[roman_claude_opus]
PASSED test_my_solution.py::test_empty[roman_claude_sonnet]
PASSED test_my_solution.py::test_empty[roman_claude_haiku]
PASSED test_my_solution.py::test_empty[roman_github_copilot]
PASSED test_my_solution.py::test_empty[roman_gemini]
PASSED test_my_solution.py::test_empty[roman_chat_gpt4o]
PASSED test_my_solution.py::test_empty[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_3999[roman_chat_gpt4]
PASSED test_my_solution.py::test_3999[roman_claude_opus]
PASSED test_my_solution.py::test_3999[roman_claude_sonnet]
PASSED test_my_solution.py::test_3999[roman_github_copilot]
PASSED test_my_solution.py::test_3999[roman_chat_gpt4o]
PASSED test_my_solution.py::test_3999[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_MDCLXVI[roman_chat_gpt4]
PASSED test_my_solution.py::test_MDCLXVI[roman_claude_opus]
PASSED test_my_solution.py::test_MDCLXVI[roman_claude_sonnet]
PASSED test_my_solution.py::test_MDCLXVI[roman_github_copilot]
PASSED test_my_solution.py::test_MDCLXVI[roman_chat_gpt4o]
PASSED test_my_solution.py::test_MDCLXVI[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_mdclxvi[roman_chat_gpt4]
PASSED test_my_solution.py::test_mdclxvi[roman_claude_opus]
PASSED test_my_solution.py::test_mdclxvi[roman_claude_sonnet]
PASSED test_my_solution.py::test_mdclxvi[roman_claude_haiku]
PASSED test_my_solution.py::test_mdclxvi[roman_github_copilot]
PASSED test_my_solution.py::test_mdclxvi[roman_gemini]
PASSED test_my_solution.py::test_mdclxvi[roman_chat_gpt4o]
PASSED test_my_solution.py::test_mdclxvi[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_X1II[roman_chat_gpt4]
PASSED test_my_solution.py::test_X1II[roman_claude_opus]
PASSED test_my_solution.py::test_X1II[roman_claude_sonnet]
PASSED test_my_solution.py::test_X1II[roman_claude_haiku]
PASSED test_my_solution.py::test_X1II[roman_github_copilot]
PASSED test_my_solution.py::test_X1II[roman_gemini]
PASSED test_my_solution.py::test_X1II[roman_chat_gpt4o]
PASSED test_my_solution.py::test_X1II[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_XiV[roman_chat_gpt4]
PASSED test_my_solution.py::test_XiV[roman_claude_opus]
PASSED test_my_solution.py::test_XiV[roman_claude_sonnet]
PASSED test_my_solution.py::test_XiV[roman_claude_haiku]
PASSED test_my_solution.py::test_XiV[roman_github_copilot]
PASSED test_my_solution.py::test_XiV[roman_gemini]
PASSED test_my_solution.py::test_XiV[roman_chat_gpt4o]
PASSED test_my_solution.py::test_XiV[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_XD[roman_chat_gpt4]
PASSED test_my_solution.py::test_XD[roman_claude_opus]
PASSED test_my_solution.py::test_XD[roman_claude_sonnet]
PASSED test_my_solution.py::test_XD[roman_claude_haiku]
PASSED test_my_solution.py::test_XD[roman_github_copilot]
PASSED test_my_solution.py::test_XD[roman_chat_gpt4o]
PASSED test_my_solution.py::test_XD[roman_chat_gpt4omini]
PASSED test_my_solution.py::test_VX[roman_chat_gpt4]
PASSED test_my_solution.py::test_VX[roman_claude_opus]
PASSED test_my_solution.py::test_VX[roman_claude_sonnet]
PASSED test_my_solution.py::test_VX[roman_claude_haiku]
PASSED test_my_solution.py::test_VX[roman_github_copilot]
PASSED test_my_solution.py::test_VX[roman_chat_gpt4o]
FAILED test_my_solution.py::test_XVIII[roman_claude_haiku] - AssertionError: ...
FAILED test_my_solution.py::test_XVIII[roman_gemini] - AssertionError: XVIII ...
FAILED test_my_solution.py::test_MCXIV[roman_claude_haiku] - AssertionError: ...
FAILED test_my_solution.py::test_MCXIV[roman_gemini] - AssertionError: MCXIV ...
FAILED test_my_solution.py::test_LLL[roman_chat_gpt4] - AssertionError: LLL s...
FAILED test_my_solution.py::test_LLL[roman_gemini] - AssertionError: LLL shou...
FAILED test_my_solution.py::test_LLL[roman_chat_gpt4o] - AssertionError: LLL ...
FAILED test_my_solution.py::test_LLL[roman_chat_gpt4omini] - AssertionError: ...
FAILED test_my_solution.py::test_empty[roman_chat_gpt4] - AssertionError: Emp...
FAILED test_my_solution.py::test_3999[roman_claude_haiku] - AssertionError: M...
FAILED test_my_solution.py::test_3999[roman_gemini] - AssertionError: MMMCMXC...
FAILED test_my_solution.py::test_MDCLXVI[roman_claude_haiku] - AssertionError...
FAILED test_my_solution.py::test_MDCLXVI[roman_gemini] - AssertionError: MDCL...
FAILED test_my_solution.py::test_XD[roman_gemini] - AssertionError: XD should...
FAILED test_my_solution.py::test_VX[roman_gemini] - AssertionError: VX should...
FAILED test_my_solution.py::test_VX[roman_chat_gpt4omini] - AssertionError: V...
======================== 16 failed, 104 passed in 0.16s ========================
